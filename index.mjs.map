{"version":3,"file":"index.mjs","sources":["../lib/ssqrt.js","../lib/ndarray.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport smap from '@stdlib/strided-base-smap';\nimport sqrtf from '@stdlib/math-base-special-sqrtf';\n\n\n// MAIN //\n\n/**\n* Computes the principal square root for each element in a single-precision floating-point strided array `x` and assigns the results to elements in a single-precision floating-point strided array `y`.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 0.0, 4.0, 9.0, 12.0, 24.0 ] );\n* var y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* ssqrt( x.length, x, 1, y, 1 );\n* // y => <Float32Array>[ 0.0, 2.0, 3.0, ~3.464, ~4.899 ]\n*/\nfunction ssqrt( N, x, strideX, y, strideY ) {\n\treturn smap( N, x, strideX, y, strideY, sqrtf );\n}\n\n\n// EXPORTS //\n\nexport default ssqrt;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as smap } from '@stdlib/strided-base-smap';\nimport sqrtf from '@stdlib/math-base-special-sqrtf';\n\n\n// MAIN //\n\n/**\n* Computes the principal square root for each element in a single-precision floating-point strided array `x` and assigns the results to elements in a single-precision floating-point strided array `y`.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float32Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float32Array} `y`\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 0.0, 4.0, 9.0, 12.0, 24.0 ] );\n* var y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* ssqrt( x.length, x, 1, 0, y, 1, 0 );\n* // y => <Float32Array>[ 0.0, 2.0, 3.0, ~3.464, ~4.899 ]\n*/\nfunction ssqrt( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\treturn smap( N, x, strideX, offsetX, y, strideY, offsetY, sqrtf );\n}\n\n\n// EXPORTS //\n\nexport default ssqrt;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport ssqrt from './ssqrt.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssqrt, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssqrt;\n"],"names":["ssqrt","N","x","strideX","y","strideY","smap","sqrtf","offsetX","offsetY","setReadOnly","ndarray"],"mappings":";;sTA+CA,SAASA,EAAOC,EAAGC,EAAGC,EAASC,EAAGC,GACjC,OAAOC,EAAML,EAAGC,EAAGC,EAASC,EAAGC,EAASE,EACzC,CCAA,SAASP,EAAOC,EAAGC,EAAGC,EAASK,EAASJ,EAAGC,EAASI,GACnD,OAAOH,EAAML,EAAGC,EAAGC,EAASK,EAASJ,EAAGC,EAASI,EAASF,EAC3D,CCtBAG,EAAAV,EAAA,UAAAW"}